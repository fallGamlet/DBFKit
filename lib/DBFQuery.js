// Generated by CoffeeScript 1.7.1
(function() {
  var DBFParser, DBFQuery;

  DBFParser = require("./DBFParser");

  DBFQuery = (function() {
    function DBFQuery(from, where, orderby, fields, encoding, callback) {
      this.from = from;
      this.where = where;
      this.orderby = orderby;
      this.fields = fields != null ? fields : '*';
      this.encoding = encoding != null ? encoding : 'cp866';
      this.callback = callback;
      this.records = [];
      this.dbfParser = new DBFParser(this.from, this.encoding);
      this.dbfParser.on('record', (function(_this) {
        return function(record) {
          var check, fieldName, obj, _i, _j, _len, _len1, _ref, _w_;
          check = true;
          if (typeof _this.where === 'function') {
            check &= _this.where(record);
          } else if ((_this.where != null) && typeof _this.where === 'object') {
            _ref = _this.where;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              _w_ = _ref[_i];
              check &= (function() {
                switch (_w_[1].toLowerCase()) {
                  case '=':
                    return record[_w_[0]] === _w_[2];
                  case '!=':
                    return record[_w_[0]] !== _w_[2];
                  case '<':
                    return record[_w_[0]] < _w_[2];
                  case '<=':
                    return record[_w_[0]] <= _w_[2];
                  case '>':
                    return record[_w_[0]] > _w_[2];
                  case '>=':
                    return record[_w_[0]] >= _w_[2];
                  case 'like':
                    return record[_w_[0]].toString().match(_w_[2]) !== null;
                }
              })();
            }
          }
          if (record['_deleted_'] === false && check) {
            if ((fields != null) && fields !== '*') {
              obj = {};
              for (_j = 0, _len1 = fields.length; _j < _len1; _j++) {
                fieldName = fields[_j];
                obj[fieldName] = record[fieldName];
              }
            } else {
              obj = record;
            }
            return _this.records.push(obj);
          }
        };
      })(this));
      this.dbfParser.on('end', (function(_this) {
        return function() {
          return typeof _this.callback === "function" ? _this.callback(_this.records) : void 0;
        };
      })(this));
    }

    DBFQuery.prototype.selectSimple = function() {
      this.records = [];
      return this.dbfParser.parse();
    };

    return DBFQuery;

  })();

  module.exports = DBFQuery;

}).call(this);
